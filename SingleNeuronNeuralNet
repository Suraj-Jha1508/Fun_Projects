#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sept 17 16:42:29 2019
@author: Suraj Jha
"""

import numpy as np

class NeuralNetwork():

  def __init__(self):
    np.random.seed(1)
    self.weights=2*np.random.random((3,1)) -1
  
  def __sigmoid(self,x):
    return 1/(1+np.exp(-x))
  
  def __sigmoid_derivative(self,x):
    return x*(1-x)

  def train(self,training_set_inputs,training_set_outputs,number_of_training_iterations):
    for iteration in range(number_of_training_iterations):
      output=self.predict(training_set_inputs)

      error=training_set_outputs-output
  
      adjustment= np.dot(training_set_inputs.T,error*self.__sigmoid_derivative(output))
      self.weights+=adjustment

  def predict(self,input):
    return self.__sigmoid(np.dot(input,self.weights))


if __name__=='__main__':
  #initialize a single neuron neural network
  neural_network=NeuralNetwork()

  print('Random starting weights:\n',neural_network.weights)

  #The training set
  training_set_inputs=np.array([[0,0,1],[1,1,1],[1,0,1],[0,1,1]])
  training_set_outputs=np.array([[0,1,1,0]]).T

  #train neural network using training sets
  neural_network.train(training_set_inputs,training_set_outputs,10000)

  print('New weights after training:\n',neural_network.weights)

  #test the neural network
  print('predictiction for :\n',neural_network.predict(array([1,0,0])))
